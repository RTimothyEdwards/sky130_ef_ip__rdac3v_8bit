#-----------------------------------------------------------------------
# Octave script for calculating gain error of a DAC
#-----------------------------------------------------------------------
# Octave script for use with efabless CACE
# Written by Tim Edwards, efabless, March 2019
# CACE generates a file with a data structure containing information
# from the SPICE runs in the following format:
#
# Name of file:  results.dat
# Name of structure: results
# Structure elements:
# (1) NAMES:  A list of names of the test conditions
# (2) UNITS:  A list of units of each of the test conditions
# (3) RESULT: The result of the SPICE run (1D or 2D)
# (4) CONDITIONx:  One list of values for each condition x for which the
#	      simulation was made.
#
# The purpose of the script is to manipulate RESULT to produce some
# alternate result, replace the RESULT values, and output the
# modified result.
#
# It is the responsibility of the Octave script to know what the
# incoming RESULT values mean, because the characterization setup will
# give UNITS for the result as the units of the final result (e.g., the
# output of this script).
#
# b[7:0] is the binary matrix, and it can be assumed that all other
# conditions are constant for the set of results passed to this script.
#-----------------------------------------------------------------------
# Gain error calculation:
# x is the digital value b7:0 converted to an integer
# V(x) is the original value in RESULT:  The voltage output of the DAC
#	under the given set of conditions.
# FSR = (Vhigh - Vlow) 	(full-scale range)
# ALSB = (Vhigh - Vlow) / 256	(ideal voltage step size per LSB)
# Videal(x) = Vlow + x * ALSB
#-----------------------------------------------------------------------

# Load results from CACE
args = argv();
load(args{1});

# Find the index of the conditions representing Vhigh, Vlow, and b7:0
vhighidx = -1;
vlowidx = -1;
bvecidx = -1;

names = results.("NAMES");
l = length(names);
for i = 1:l,
    n = names(i);
    if (strcmp(n, "Vhigh") == 1),
	vhighidx = i;
    elseif (strcmp(n, "Vlow") == 1),
	vlowidx = i;
    elseif (strcmp(n, "b[7:0]") == 1),
	bvecidx = i;
    endif
endfor

# Sanity checks
if (vhighidx < 0),
    printf("Error:  Cannot find condition Vhigh in list!");
    return
elseif (vlowidx < 0),
    printf("Error:  Cannot find condition Vlow in list!");
    return
elseif (bvecidx < 0),
    printf("Error:  Cannot find condition b[7:0] in list!");
    return
endif
    
result = results.("RESULT");

# Get the digital value array
cstr = sprintf("CONDITION%d", bvecidx);
bvals = results.(cstr);

# Convert digital binary string to integer
ival = bin2dec(bvals);

# Get Vhigh value (all of them should be the same, so take the first)
cstr = sprintf("CONDITION%d", vhighidx);
vhighval = results.(cstr)(1);

# Get Vlow value (all of them should be the same, so take the first)
cstr = sprintf("CONDITION%d", vlowidx);
vlowval = results.(cstr)(1);

# Compute FSR (full scale voltage range)
fsr = vhighval - vlowval;

# Compute ALSB (voltage range per bit)
alsb = fsr / 256.0;

# Compute ideal output values
videal = vlowval + ival * alsb;

# Compute the slope (use polyfit() if given more than two points)
if (length(result) == 2),
    slope = (result(2) - result(1)) / (videal(2) - videal(1));
else,
    p = polyfit(videal, result, 1);
    slope = p(1)
endif

# Compute the maximum gain error
gainerr = fsr * (slope - 1);

# Compute gain error as fraction of FSR (CACE converts result to %FSR)
gainfrac = gainerr / fsr;

# Output the result This should be the only text generated by the script.
printf("%g\n", gainfrac)
